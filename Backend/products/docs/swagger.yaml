basePath: /
definitions:
  model.ErrorResponse:
    description: Represents an error response when an operation fails.
    properties:
      details:
        description: Detailed error message with multiple examples
        example: Product not found
        type: string
      error:
        description: Error message with example value
        example: Error fetching product
        type: string
    type: object
  model.Product:
    description: Represents a product for sale in the marketplace.
    properties:
      productCondition:
        description: Product condition
        example: 4
        type: integer
      productDescription:
        description: Product description
        example: A high-performance laptop
        type: string
      productId:
        description: Unique product ID (UUID)
        example: 9b96a85c-f02e-47a1-9a1a-1dd9ed6147bd
        type: string
      productImage:
        description: Product image URL in GET, Actual product image in PUT
        example: https://example.com/laptop.jpg
        type: string
      productLocation:
        description: Location of the product
        example: University of Florida
        type: string
      productPostDate:
        description: Product post date (time.Time)
        example: 02-20-2025
        type: string
      productPrice:
        description: Price of the product
        example: 999.99
        type: number
      productTitle:
        description: Product title
        example: Laptop
        type: string
      userId:
        description: Unique user ID
        example: 123
        type: integer
    type: object
host: unibazaar-products.azurewebsites.net
info:
  contact:
    email: avaneesh.khandekar@gmail.com
    name: Avaneesh Khandekar
  description: API for managing products in the UniBazaar marketplace for university
    students.
  title: UniBazaar Products API
  version: "1.0"
paths:
  /products:
    get:
      consumes:
      - application/json
      description: Fetch all products from the system, regardless of the user ID.
        If no products are found, an error is returned.
      parameters:
      - description: ID of the last product to fetch
        in: query
        name: lastId
        type: string
      - description: Number of products to fetch (default is 10)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of all products
          schema:
            items:
              $ref: '#/definitions/model.Product'
            type: array
        "404":
          description: No products found in the system
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Get all products in the system
      tags:
      - Products
    post:
      consumes:
      - multipart/form-data
      description: Creates a new product by parsing form data, uploading images to
        S3, and saving it to the database. The product is linked to the user via their
        User ID.
      parameters:
      - description: User ID (form data)
        in: formData
        name: UserId
        required: true
        type: integer
      - description: Product title
        in: formData
        name: productTitle
        required: true
        type: string
      - description: Product description
        in: formData
        name: productDescription
        type: string
      - description: Product price
        in: formData
        name: productPrice
        required: true
        type: number
      - description: Product condition
        in: formData
        name: productCondition
        required: true
        type: integer
      - description: Product location
        in: formData
        name: productLocation
        required: true
        type: string
      - description: Product image
        in: formData
        name: productImage
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Product created successfully
          schema:
            $ref: '#/definitions/model.Product'
        "400":
          description: Invalid User ID or form data
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Create a new product
      tags:
      - Products
  /products/{userId}:
    get:
      consumes:
      - application/json
      description: Fetch all products listed by a user, identified by their user ID.
        If no products are found, an error is returned.
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      - description: ID of the last product to fetch
        in: query
        name: lastID
        type: string
      - description: Number of products to fetch (default is 10)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of products
          schema:
            items:
              $ref: '#/definitions/model.Product'
            type: array
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: No products found for the given user ID
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Get all products for a specific user by user ID
      tags:
      - Products
  /products/{userId}/{productId}:
    delete:
      description: Delete a product from the system based on the user ID and product
        ID. This also removes the associated image from S3 if available.
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      - description: Product ID
        in: path
        name: productId
        required: true
        type: string
      responses:
        "204":
          description: Product deleted
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Delete a product by user ID and product ID
      tags:
      - Products
    put:
      consumes:
      - application/json
      description: Update a product's details based on the user ID and product ID.
        The product image is also updated if provided.
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      - description: Product ID
        in: path
        name: productId
        required: true
        type: string
      - description: Product Details
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/model.Product'
      produces:
      - application/json
      responses:
        "200":
          description: Updated product
          schema:
            $ref: '#/definitions/model.Product'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Update a product by user ID and product ID
      tags:
      - Products
  /products/search:
    get:
      description: Searches products based on a query and optional limit.
      parameters:
      - description: Search query
        in: query
        name: query
        required: true
        type: string
      - description: Limit the number of results
        in: query
        name: limit
        type: integer
      responses:
        "200":
          description: List of products matching the search query
          schema:
            items:
              $ref: '#/definitions/model.Product'
            type: array
        "400":
          description: Invalid request or missing query parameter
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: No products found for the given query
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Search products
      tags:
      - Products
schemes:
- https
swagger: "2.0"
